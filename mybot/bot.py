import logging
from aiogram import Bot, Dispatcher, executor, types
import wikipedia
import json
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8358041339:AAGfYWu9Qve-2NtBaNIPFY1ExA973ruo4pI"   # —Ç–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_ID = 6454793905                                      # —Ç–≤–æ–π Telegram ID
wikipedia.set_lang("ru")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# === –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π ===
FILE = "knowledge.json"

def load_knowledge():
    if os.path.exists(FILE):
        with open(FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {
        "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": {
            "–ø–∏—Ñ–∞–≥–æ—Ä": "–¢–µ–æ—Ä–µ–º–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞: a¬≤ + b¬≤ = c¬≤",
            "–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ": "–†–µ—à–µ–Ω–∏–µ: x = (-b ¬± ‚àö(b¬≤-4ac)) / 2a"
        },
        "—Ñ–∏–∑–∏–∫–∞": {
            "—Å–∏–ª–∞": "F = m * a (–≤—Ç–æ—Ä–æ–π –∑–∞–∫–æ–Ω –ù—å—é—Ç–æ–Ω–∞)",
            "—Ä–∞–±–æ—Ç–∞": "A = F * s * cos(Œ±)"
        },
        "—Ö–∏–º–∏—è": {
            "–≤–æ–¥–∞": "H‚ÇÇO ‚Äî –æ–∫—Å–∏–¥ –≤–æ–¥–æ—Ä–æ–¥–∞",
            "—É–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑": "CO‚ÇÇ ‚Äî —É–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑"
        },
        "–±–∏–æ–ª–æ–≥–∏—è": {
            "–º–∏—Ç–æ–∑": "–ú–∏—Ç–æ–∑ ‚Äî –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–ª–µ–Ω–∏—è –∫–ª–µ—Ç–∫–∏ –Ω–∞ –¥–≤–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–ª–µ—Ç–∫–∏",
            "—Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑": "–§–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑ ‚Äî –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤ –∏–∑ CO‚ÇÇ –∏ H‚ÇÇO –ø—Ä–∏ —Å–≤–µ—Ç–µ"
        },
        "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫": {
            "–≥–ª–∞–≤–Ω—ã–µ —á–ª–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": "–ü–æ–¥–ª–µ–∂–∞—â–µ–µ –∏ —Å–∫–∞–∑—É–µ–º–æ–µ",
            "–≤–∏–¥—ã –≥–ª–∞–≥–æ–ª–æ–≤": "–°–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∏ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–π"
        }
    }

def save_knowledge():
    with open(FILE, "w", encoding="utf-8") as f:
        json.dump(knowledge_base, f, indent=4, ensure_ascii=False)

knowledge_base = load_knowledge()

def find_answer(subject, query):
    subject = subject.lower()
    query = query.lower()
    if subject in knowledge_base:
        for key, answer in knowledge_base[subject].items():
            if key in query:
                return answer
    try:
        result = wikipedia.summary(query, sentences=2)
        return result
    except Exception as e:
        logging.error(f"Wiki error: {e}")
        return "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç üò¢"

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø —à–∫–æ–ª—å–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫!\n\n"
        "–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "üìò –ø—Ä–µ–¥–º–µ—Ç: –≤–æ–ø—Ä–æ—Å\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞: —Ç–µ–æ—Ä–µ–º–∞ –ø–∏—Ñ–∞–≥–æ—Ä–∞\n"
        "—Ñ–∏–∑–∏–∫–∞: —Ä–∞–±–æ—Ç–∞ —Å–∏–ª—ã\n\n"
        "üîë –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã:\n"
        "/add –ø—Ä–µ–¥–º–µ—Ç|–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ|–æ—Ç–≤–µ—Ç",
        parse_mode="Markdown"
    )

@dp.message_handler(commands=['add'])
async def add_knowledge(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return
    try:
        _, data = message.text.split(" ", 1)
        subject, keyword, answer = data.split("|")
        subject = subject.strip().lower()
        keyword = keyword.strip().lower()
        answer = answer.strip()
        if subject not in knowledge_base:
            knowledge_base[subject] = {}
        knowledge_base[subject][keyword] = answer
        save_knowledge()
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É:\n\nüìò *{subject}*\nüîë {keyword}\nüí° {answer}",
            parse_mode="Markdown"
        )
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π:\n/add –ø—Ä–µ–¥–º–µ—Ç|–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ|–æ—Ç–≤–µ—Ç", parse_mode="Markdown")

@dp.message_handler()
async def answer(message: types.Message):
    if ":" not in message.text:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç –∏ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ :.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ö–∏–º–∏—è: –≤–æ–¥–∞",
            parse_mode="Markdown"
        )
        return
    subject, query = message.text.split(":", 1)
    subject, query = subject.strip(), query.strip()
    response = find_answer(subject, query)
    await message.answer(response)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
